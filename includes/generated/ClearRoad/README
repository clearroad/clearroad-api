<h2 id='clearroad'>ClearRoad</h2>
<aside class="notice">
  This documentation has been generated for the version <code>3.0.1</code>
</aside>

<p>The <code>ClearRoad</code> class contains a subset of functions from the underlying <a href="https://jio.nexedi.com/">jIO.js</a> library, which uses <a href="https://lab.nexedi.com/nexedi/rsvp.js">RSVP.js</a> to chain functions like <code>Promises</code>.
Please refer to their documentation for more information.</p>

<!-- @usage tag -->

<!-- @property tags -->
<h3 id='clearroad-constructor'>constructor</h3><pre class="highlight javascript tab-javascript"><code><span class="k">new</span> <span class="nx">ClearRoad</span><span class="p">(</span><span class="s1">'apiUrl'</span><span class="p">,</span> <span class="s1">'accessToken'</span><span class="p">);</span>
</code></pre>
<p><code>constructor(url,&nbsp;accessToken,&nbsp;options)</code></p>

<p>Initialise a new ClearRoad object to interact with the ERP5 storage.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>url</td>
<td><code>string</code></td>
<td>ClearRoad API url.</td>
<td>Yes</td>
</tr>
<tr>
<td>accessToken</td>
<td><code>string</code></td>
<td>Access token to authenticate on the ClearRoad API (if necessary).</td>
<td>No</td>
</tr>
<tr>
<td>options</td>
<td><code>IClearRoadOptions</code></td>
<td>View <a href="#api-reference-clearroad-interfaces-iclearroadoptions">IClearRoadOptions</a>.<em> (default: <code>{}</code>)</em></td>
<td>No</td>
</tr>
</tbody></table>
<h3 id='clearroad-post'>post</h3><pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
  <span class="na">key1</span><span class="p">:</span> <span class="s2">"value"</span><span class="p">,</span>
  <span class="na">key2</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
    <span class="s2">"subkey"</span><span class="p">:</span> <span class="s2">"subvalue"</span>
  <span class="p">})</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 'id' is the posted document 'source_reference'</span>
<span class="p">})</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="c1">// 'id' is the posted document 'source_reference'</span>
<span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
  <span class="na">key1</span><span class="p">:</span> <span class="s2">"value"</span><span class="p">,</span>
  <span class="na">key2</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
    <span class="s2">"subkey"</span><span class="p">:</span> <span class="s2">"subvalue"</span>
  <span class="p">})</span>
<span class="p">});</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="c1">// 'id' is the posted document 'source_reference'</span>
<span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
  <span class="na">key1</span><span class="p">:</span> <span class="s2">"value"</span><span class="p">,</span>
  <span class="na">key2</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
    <span class="s2">"subkey"</span><span class="p">:</span> <span class="s2">"subvalue"</span>
  <span class="p">})</span>
<span class="p">});</span>
</code></pre>
<p><code>post(data)</code></p>

<p>
  <b>Returns:</b> <code>string</code> The id of the posted message.
</p>

<p>Posts data in your local storage and return the <code>reference</code> of the new document.
Then use the <a href="#api-reference-clearroad-sync">sync method</a> to synchronize the data with the ClearRoad API.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>data</td>
<td><code>postData</code></td>
<td>The message to post. Each <code>value</code> paired with a <code>key</code> must be a <code>string</code>.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h3 id='clearroad-state'>state</h3><pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({...})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">reference</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// posting a message returns the reference of the message</span>
    <span class="c1">// use reference to get the state of the message</span>
    <span class="k">return</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">reference</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// state = 'processed'</span>
  <span class="p">});</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="c1">// posting a message returns the reference of the message</span>
<span class="kr">const</span> <span class="nx">reference</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
  <span class="p">...</span>
<span class="p">});</span>
<span class="c1">// use reference to get the state of the message</span>
<span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">reference</span><span class="p">);</span>
<span class="c1">// state = 'processed'</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="c1">// posting a message returns the reference of the message</span>
<span class="kr">const</span> <span class="nx">reference</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">post</span><span class="p">({</span>
  <span class="p">...</span>
<span class="p">});</span>
<span class="c1">// use reference to get the state of the message</span>
<span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">reference</span><span class="p">);</span>
<span class="c1">// state = 'processed'</span>
</code></pre>
<p><code>state(id)</code></p>

<p>
  <b>Returns:</b> <code>ValidationStates</code> The [state](#api-reference-clearroad-enums-validationstates) of the message.
</p>

<p>Check for the processing state of the message.
Allow some time after <a href="#api-reference-clearroad-sync">synchronizing</a> before checking for the state.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td><code>string</code></td>
<td>The id of the message.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h3 id='clearroad-sync'>sync</h3><pre class="highlight javascript tab-javascript"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">sync</span><span class="p">();</span>
</code></pre>
<p><code>sync(progress)</code></p>

<p>
  <b>Returns:</b> <code>IQueue&lt;void&gt;</code> 
</p>

<p>Synchronizes the local storage with the ClearRoad Platform (will make sure both storage contain the same data).</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>progress</td>
<td><code>syncProgressCallback</code></td>
<td>Function to get notified of progress. There are 4 storages to sync.<em> (default: <code>() =&gt; { }</code>)</em></td>
<td>No</td>
</tr>
</tbody></table>
<h3 id='clearroad-querybystate'>queryByState</h3><pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">queryByState</span><span class="p">(</span><span class="s1">'rejected'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// rejected messages</span>
<span class="p">});</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="kr">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">queryByState</span><span class="p">(</span><span class="s1">'rejected'</span><span class="p">);</span>
<span class="c1">// rejected messages</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="kr">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">queryByState</span><span class="p">(</span><span class="s1">'rejected'</span><span class="p">);</span>
<span class="c1">// rejected messages</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</code></pre>
<p><code>queryByState(state,&nbsp;options)</code></p>

<p>
  <b>Returns:</b> <code>IQueue&lt;IJioQueryResults&gt;</code> Search results.
</p>

<p>Retrieve the messages in a certain &quot;processing&quot; state.
By default, when a message is not yet synchronized or processed, the state is <code>not_processed</code>.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>state</td>
<td><code>ValidationStates</code></td>
<td>State of the message.</td>
<td>Yes</td>
</tr>
<tr>
<td>options</td>
<td><code>Partial&lt;IJioQueryOptions&gt;</code></td>
<td>Set { sort_on, limit } on the results.<em> (default: <code>{}</code>)</em></td>
<td>No</td>
</tr>
</tbody></table>
<h3 id='clearroad-alldocs'>allDocs</h3>
<blockquote>
<p>Query the documents from ClearRoad Platform:</p>
</blockquote>
<pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">allDocs</span><span class="p">({</span>
  <span class="na">query</span><span class="p">:</span> <span class="nx">query_object</span><span class="p">,</span>
  <span class="na">limit</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
  <span class="na">sort_on</span><span class="p">:</span> <span class="p">[[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'ascending'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'descending'</span><span class="p">]],</span>
  <span class="na">select_list</span><span class="p">:</span> <span class="p">[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'key3'</span><span class="p">],</span>
  <span class="na">include_docs</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// read rows in result.rows</span>
<span class="p">})</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">allDocs</span><span class="p">({</span>
  <span class="na">query</span><span class="p">:</span> <span class="nx">query_object</span><span class="p">,</span>
  <span class="na">limit</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
  <span class="na">sort_on</span><span class="p">:</span> <span class="p">[[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'ascending'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'descending'</span><span class="p">]],</span>
  <span class="na">select_list</span><span class="p">:</span> <span class="p">[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'key3'</span><span class="p">],</span>
  <span class="na">include_docs</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">});</span>
<span class="c1">// read rows in result.rows</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">allDocs</span><span class="p">({</span>
  <span class="na">query</span><span class="p">:</span> <span class="nx">query_object</span><span class="p">,</span>
  <span class="na">limit</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
  <span class="na">sort_on</span><span class="p">:</span> <span class="p">[[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'ascending'</span><span class="p">],</span> <span class="p">[</span><span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'descending'</span><span class="p">]],</span>
  <span class="na">select_list</span><span class="p">:</span> <span class="p">[</span><span class="s1">'key1'</span><span class="p">,</span> <span class="s1">'key2'</span><span class="p">,</span> <span class="s1">'key3'</span><span class="p">],</span>
  <span class="na">include_docs</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">});</span>
<span class="c1">// read rows in result.rows</span>
</code></pre>
<blockquote>
<p>Which returns object in the following format:</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="c1">// with select_list: ['select_list_key']</span>
<span class="p">{</span>
  <span class="s2">"total_rows"</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
  <span class="s2">"rows"</span><span class="p">:</span> <span class="p">[{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="s2">"text_id"</span><span class="p">,</span>
    <span class="s2">"value"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"select_list_key"</span><span class="p">:</span> <span class="s2">"select_list_value"</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">...]</span>
<span class="p">}</span>

<span class="c1">// with include_docs = true</span>
<span class="p">{</span>
  <span class="s2">"total_rows"</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
  <span class="s2">"rows"</span><span class="p">:</span> <span class="p">[{</span>
    <span class="s2">"id"</span><span class="p">:</span> <span class="s2">"text_id"</span><span class="p">,</span>
    <span class="s2">"doc"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"key"</span><span class="p">:</span> <span class="s2">"value"</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">...]</span>
<span class="p">}</span>
</code></pre>
<p><code>allDocs(options)</code></p>

<p>
  <b>Returns:</b> <code>IQueue&lt;IJioQueryResults&gt;</code> Search results.
</p>

<p>Query for documents in the local storage. Make sure <code>.sync()</code> is called before.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>options</td>
<td><code>IJioQueryOptions</code></td>
<td>Query <a href="#api-reference-clearroad-interfaces-ijioqueryoptions">options</a>. If none set, return all documents.</td>
<td>No</td>
</tr>
</tbody></table>
<h3 id='clearroad-getreportfromrequest'>getReportFromRequest</h3><pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">getReport</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// read report</span>
<span class="p">})</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="kr">const</span> <span class="nx">report</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">getReport</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">);</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="kr">const</span> <span class="nx">report</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">getReport</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">);</span>
</code></pre>
<p><code>getReportFromRequest(sourceReference)</code></p>

<p>
  <b>Returns:</b> <code>IQueue&lt;any&gt;</code> The report as JSON.
</p>

<p>Get a report using the Report Request reference.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>sourceReference</td>
<td><code>string</code></td>
<td>The reference of the Report Request.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h3 id='clearroad-getreport'>getReport</h3><pre class="highlight javascript tab-javascript--browser"><code><span class="nx">cr</span><span class="p">.</span><span class="nx">getReportFromRequest</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">report</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// read report</span>
<span class="p">})</span>
</code></pre><pre class="highlight javascript tab-javascript--browser-es6"><code><span class="kr">const</span> <span class="nx">report</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">getReportFromRequest</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">);</span>
</code></pre><pre class="highlight javascript tab-javascript--node"><code><span class="kr">const</span> <span class="nx">report</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">cr</span><span class="p">.</span><span class="nx">getReportFromRequest</span><span class="p">(</span><span class="s1">'reference'</span><span class="p">);</span>
</code></pre>
<p><code>getReport(reference)</code></p>

<p>
  <b>Returns:</b> <code>IQueue&lt;any&gt;</code> The report as JSON.
</p>

<p>Retrieve <a href="https://api.clearroadlab.io/docs/#requesting-a-report">the report</a> with the given report <code>reference</code>.
If you only have the <code>reference</code> of the report request, please use <a href="#api-reference-clearroad-getreportfromrequest">getReportFromRequest</a> instead.</p>

<table><thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
<th>Required</th>
</tr>
</thead><tbody>
<tr>
<td>reference</td>
<td><code>string</code></td>
<td>The reference of the Report.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h3 id='clearroad-enums'>Enums</h3><h4 id='clearroad-enums-localstoragetypes'>LocalStorageTypes</h4>
<p>Note: this list does not contain the additional Node.js storages developped by ClearRoad available <a href="https://github.com/clearroad/clearroad-api-storages">here</a>.</p>

<table><thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>indexeddb</td>
<td><code>&#39;indexeddb&#39;</code></td>
<td>Native Browser IndexedDB storage.</td>
</tr>
<tr>
<td>dropbox</td>
<td><code>&#39;dropbox&#39;</code></td>
<td>Storage data in a dropbox account. Need <code>accessToken</code>.</td>
</tr>
<tr>
<td>gdrive</td>
<td><code>&#39;gdrive&#39;</code></td>
<td>Storage data in a google drive account. Need <code>accessToken</code>.</td>
</tr>
</tbody></table>
<h4 id='clearroad-enums-portaltypes'>PortalTypes</h4>
<p>Each message is represented by a &quot;portal_type&quot; (or message category)</p>

<table><thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>BillingPeriodMessage</td>
<td><code>&#39;Billing Period Message&#39;</code></td>
<td></td>
</tr>
<tr>
<td>File</td>
<td><code>&#39;File&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadAccount</td>
<td><code>&#39;Road Account&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadAccountMessage</td>
<td><code>&#39;Road Account Message&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadEvent</td>
<td><code>&#39;Road Event&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadEventMessage</td>
<td><code>&#39;Road Event Message&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadMessage</td>
<td><code>&#39;Road Message&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadReportRequest</td>
<td><code>&#39;Road Report Request&#39;</code></td>
<td></td>
</tr>
<tr>
<td>RoadTransaction</td>
<td><code>&#39;Road Transaction&#39;</code></td>
<td></td>
</tr>
</tbody></table>
<h4 id='clearroad-enums-validationstates'>ValidationStates</h4>
<p>When a message is processed by the ClearRoad platform, it will create a new message with a validation state.</p>

<table><thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>Processed</td>
<td><code>&#39;processed&#39;</code></td>
<td>Message has been processed by the ClearRoad platform.</td>
</tr>
<tr>
<td>Rejected</td>
<td><code>&#39;rejected&#39;</code></td>
<td>Message has been rejected by the ClearRoad platform. A <code>comment</code> will be added explaining the reason.</td>
</tr>
<tr>
<td>Submitted</td>
<td><code>&#39;submitted&#39;</code></td>
<td>Message has been submitted to the ClearRoad platform but still processing.</td>
</tr>
<tr>
<td>Unprocessed</td>
<td><code>&#39;not_processed&#39;</code></td>
<td>When the message has not been sent to the ClearRoad platform yet, the state is &quot;not_processed&quot;.</td>
</tr>
</tbody></table>
<h4 id='clearroad-enums-groupingreferences'>GroupingReferences</h4>
<table><thead>
<tr>
<th>Key</th>
<th>Value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>Data</td>
<td><code>&#39;data&#39;</code></td>
<td>Message created in the local storage.</td>
</tr>
<tr>
<td>Report</td>
<td><code>&#39;report&#39;</code></td>
<td>Message created on the ClearRoad platform.</td>
</tr>
</tbody></table>
<h3 id='clearroad-interfaces'>Interfaces</h3><h4 id='clearroad-interfaces-iclearroadoptions'>IClearRoadOptions</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>localStorage</td>
<td><code>IClearRoadOptionsLocalStorage</code></td>
<td>Options for the local storage. View <a href="#api-reference-clearroad-interfaces-iclearroadoptionslocalstorage">IClearRoadOptionsLocalStorage</a>.</td>
<td>Yes</td>
</tr>
<tr>
<td>minDate</td>
<td><code>Date&#124;number&#124;string</code></td>
<td>Messages updated before this date will not be synchronized. If not set, all messages will be synchronized. Improves speed of synchronisation for big sets.</td>
<td>Yes</td>
</tr>
<tr>
<td>syncPortalTypes</td>
<td><code>PortalTypes[]</code></td>
<td>View <a href="#api-reference-clearroad-enums-portaltypes">PortalTypes</a>. Defines which types of messages to synchronize. If not set, all messages will be synchronized. Improves speed of synchronisation for big sets.</td>
<td>Yes</td>
</tr>
<tr>
<td>maxSyncObjects</td>
<td><code>number</code></td>
<td>Maximum number of objects that will be sycnrhonized from the ClearRoad platform to the local storage. Default is <code>1234567890</code>.</td>
<td>Yes</td>
</tr>
<tr>
<td>useQueryStorage</td>
<td><code>boolean</code></td>
<td>Force using a query storage around the localStorage. Needed if the storage can not query data directly. See information on the storage.</td>
<td>Yes</td>
</tr>
<tr>
<td>debug</td>
<td><code>boolean</code></td>
<td>Log to console replication steps between local and remote storage.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-iclearroadoptionslocalstorage'>IClearRoadOptionsLocalStorage</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>type</td>
<td><code>LocalStorageTypes&#124;string</code></td>
<td>Type of the storage. View <a href="#api-reference-clearroad-enums-localstoragetypes">LocalStorageTypes</a>.</td>
<td>No</td>
</tr>
<tr>
<td>accessToken</td>
<td><code>string</code></td>
<td>Access token to authenticate on the ClearRoad API (if necessary).</td>
<td>Yes</td>
</tr>
<tr>
<td>database</td>
<td><code>string</code></td>
<td>Name of the database when the objects will be stored.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-ijioqueryoptions'>IJioQueryOptions</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>query</td>
<td><code>string</code></td>
<td>Search with a query. Refer to the jIO documentation in the jIO Query Engine section for details.</td>
<td>No</td>
</tr>
<tr>
<td>limit</td>
<td><code>[number, number]</code></td>
<td>Limit the results. Leave empty for no limit.</td>
<td>Yes</td>
</tr>
<tr>
<td>sort_on</td>
<td><code>JioQuerySortProperty[]</code></td>
<td>List of fields to sort on, each specifying the order with ascending/descending. Example: <code>[[&#39;date&#39;, &#39;ascending&#39;], [&#39;id&#39;, &#39;descending]]</code></td>
<td>Yes</td>
</tr>
<tr>
<td>select_list</td>
<td><code>string[]</code></td>
<td>When provided, the response has a <code>value</code> containing the values of these keys for each document.</td>
<td>Yes</td>
</tr>
<tr>
<td>include_docs</td>
<td><code>boolean</code></td>
<td>When <code>true</code>, the response has a <code>doc</code> containing the full metadata for each document.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-ijioqueryresults'>IJioQueryResults</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>data</td>
<td><code>IJioQueryResultsData</code></td>
<td>The result <a href="#api-reference-clearroad-interfaces-ijioqueryresultsdata">data</a>.</td>
<td>No</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-ijioqueryresultsdata'>IJioQueryResultsData</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>rows</td>
<td><code>IJioQueryResultRow[]</code></td>
<td>List of <a href="#api-reference-clearroad-interfaces-ijioqueryresultrow">result row</a>.</td>
<td>No</td>
</tr>
<tr>
<td>total_rows</td>
<td><code>number</code></td>
<td>The total number of results.</td>
<td>No</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-ijioqueryresultrow'>IJioQueryResultRow</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td><code>string</code></td>
<td>Document id</td>
<td>No</td>
</tr>
<tr>
<td>doc</td>
<td><code>any</code></td>
<td>Original document value.</td>
<td>Yes</td>
</tr>
<tr>
<td>value</td>
<td><code>any</code></td>
<td>Filtered properties of the document.</td>
<td>Yes</td>
</tr>
</tbody></table>
<h4 id='clearroad-interfaces-iqueue'>IQueue</h4>
<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead><tbody>
<tr>
<td>push</td>
<td><code>IQueue&lt;TResult1&#124;TResult2&gt;</code></td>
<td>Similar to <code>Promise</code> but can be cancelled.</td>
<td>No</td>
</tr>
</tbody></table>
